<html>

<FONT FACE="arial" SIZE="2">
<head>
<title>DirectPlay Document</title>


<TR><TD COLSPAN=2 VALIGN=Bottom HEIGHT=25 WIDTH=640>

<P>
<H2>About DirectPlay</H2>
<P>The DirectX Team
<P>September 5, 1996
<P>
<P><i><h3>Introduction</h3></i>
<P>
The Microsoft&reg; DirectPlay&trade; application programming interface
(API) for Windows&reg; 95 is a software interface that simplifies
application access to communication services.  DirectPlay has
become a technology family that provides a way for applications
to communicate with each other that is independent of the underlying
transport, protocol, or online service.  Instead of forcing the
developer to deal with the differences that each of these connectivity
solutions represents, DirectPlay provides well defined, generalized
communication capabilities.  DirectPlay shields the developer
from the underlying complexities of diverse connectivity implementations,
freeing them to concentrate on producing a great application.
<P>
<I><H3>DirectPlay Architecture</h3></I>
<P>
The DirectPlay architecture is composed of two types of components:
DirectPlay itself and the <I>Service Provider</I>.  DirectPlay
is provided by Microsoft and presents a common interface to the
application.  The service providers  furnish medium-specific communications
services as requested by DirectPlay.  Anyone, including online
services, can supply service providers for specialized hardware
and communications media.  Microsoft supplies service providers
for direct modem-to-modem (TAPI) connections, COM port serial
connections, Internet TCP/IP, and IPX protocols with DirectPlay.
<P>
The DirectPlay interface hides the complexities and unique tasks
required to establish an arbitrary communications link inside
the DirectPlay service provider implementation. A application
using DirectPlay need only concern itself with the performance
of the communications medium (e.g. bandwidth and latency), not
whether that medium is being provided by a modem, network, or
online service.
<P>
DirectPlay supports a peer-to-peer communication model; that is,
every participant in the communications session can communicate
directly with anyone else and it is expected that each participant
is maintaining information on the complete state of the session.
 There is one participant called the <I>session host</I> which
controls new participants joining the session and assigning player
and group ID numbers.
<P>
DirectPlay features:
<UL>
<LI><B>Network independence</B> - the only thing necessary to
run the application on another network is to write a service provider
for it. No need to change the application at all!
<LI><B>Service provider model</B> - this allows DirectPlay to
take advantage of network capabilities like multicasting to optimize
operations like sending messages to all participants.
<LI><B>Simple send/receive</B> model for exchanging messages between
players.
<LI><B>Player and group management functions</B> - automatic messages
generated when new players are created, destroyed, added/deleted
from groups, etc.; function to help manage application specific
data associated with the player/group.
<LI><B>Naming of players and groups</B>.
<LI><B>Remote shared data</B> - changes in remote data are propagated
to all the other machines automatically.
<LI><B>Unicode </B>and<B> ANSI </B>support.
<LI><B>Keep alive</B> - DirectPlay will monitor when players lose
their connection.
<LI><B>Lobby functions</B> - a matchmaking service can bring together
players and automatically start the application on all the participant's
machines and connect them to each other in a communications channel.
Once the game is in progress the lobby software and the application
can exchange information while the session is in progress.
</UL>
</head>

<body bgcolor=#000000 text=#FFFFFF link=#FFFF00 vlink=#FF0000>
<basefont face="Times New Roman" size=3>



</body>

</html>
